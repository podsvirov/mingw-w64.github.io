{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#_1","title":"Overview","text":"<p>Mingw-w64 is an advancement of the original mingw.org project, created to support the GCC compiler on Windows systems. It has forked it in 2007 in order to provide support for 64 bits and new APIs. It has since then gained widespread use and distribution.</p> <p>The development and community are very active and welcoming with new contributors every month and simple installers.</p>"},{"location":"#headers-libraries-and-runtime","title":"Headers, Libraries and Runtime","text":"<ul> <li>More than a million lines of headers are provided, not counting generated ones,   and regularly expanded to track new Windows APIs.</li> <li>Everything needed for linking and running your code on Windows.</li> <li>Winpthreads, a pthreads library for C++11 threading support and simple   integration with existing project.</li> <li>Winstorecompat, a work-in-progress convenience library that eases conformance with the Windows Store.</li> <li>Better-conforming and faster math support compared to VisualStudio's.</li> </ul>"},{"location":"#tools","title":"Tools","text":"<ul> <li>gendef: generate Visual Studio .def files from .dll files.</li> <li>genidl: generate .idl files from .dll files.</li> <li>widl: compile .idl files.</li> </ul>"},{"location":"#friend-projects","title":"Friend projects","text":"<p>Mingw-w64 interacts a lot with other projects in order to help everyone move forward. Contributions have been going to and coming from these projects:</p> Cygwin           ReactOS           Wine           MSYS2"},{"location":"#some-projects-using-mingw-w64","title":"Some Projects using Mingw-w64","text":"<ul> <li>Fedora cross-compiler</li> <li>Npackd</li> <li>OpenSUSE</li> <li>Win-builds</li> <li>Barchart-UDT</li> <li>Blender</li> <li>Boost</li> <li>Botan</li> <li>Ceemple</li> <li>Code::Blocks</li> <li>DAE Tools</li> <li>devkitPro</li> <li>Disk Based HashTables</li> <li>Ecere SDK</li> <li>Ekiga</li> <li>Emerge Desktop</li> <li>Enlightenment</li> <li>Factor</li> <li>FFmpeg</li> <li>FLTK</li> <li>Freecell Solver</li> <li>Freeverb3</li> <li>GCC: The GNU Compiler Collection</li> <li>GDB: The GNU Project Debugger</li> <li>GIMP</li> <li>GNU Binutils</li> <li>GNU SASL</li> <li>GnuTLS</li> <li>GraphicsMagick</li> <li>GTK+</li> <li>Hexen II: Hammer of Thyrion</li> <li>iAuxSoft</li> <li>ImageMagick</li> <li>JPen</li> <li>KDE Software Collection</li> <li>libav</li> <li>LibreOffice</li> <li>libsndfile</li> <li>libvirt</li> <li>libvpx</li> <li>Libxml2</li> <li>MAME (Yes, the arcade emulator!)</li> <li>ManKai Common Lisp</li> <li>mCtrl</li> <li>mpg123</li> <li>MPIR</li> <li>MS MPI (repackaged)</li> <li>MS MPI</li> <li>OCaml</li> <li>OpenFOAM</li> <li>OpenLisp</li> <li>OpenSC</li> <li>OpenSSL</li> <li>OpenTURNS</li> <li>Perl (5.12.0 and later)</li> <li>PostgreSQL</li> <li>pthreads</li> <li>PToolsWin</li> <li>QEMU</li> <li>Qt</li> <li>QuakeSpasm</li> <li>ReMooD</li> <li>SBC Archiver</li> <li>Smart Image Denoiser</li> <li>smartmontools</li> <li>Strawberry Perl (bundles C toolchains)</li> <li>strongSwan</li> <li>The R Project for Statistical Computing</li> <li>Tomahawk Player</li> <li>VideoLAN VLC</li> <li>VSXu</li> <li>Woo</li> <li>wxPerl PPMs</li> <li>wxWidgets</li> <li>YafaRay</li> <li>zlib</li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>The releases are sorted by date, with the most recent release at the top.</p>"},{"location":"changelog/#v803-2024-06-05","title":"v8.0.3: 2024-06-05","text":"<ul> <li>Various backports</li> </ul>"},{"location":"changelog/#v1200-2024-05-29","title":"v12.0.0: 2024-05-29","text":"<p>Important: UCRT is now the default CRT runtime instead of MSVCRT, check the mingw-w64-doc/howto-build/ucrt-vs-msvcrt.txt document for details. Both header set and CRT must be configured and built with the same settings consistently for proper functionality. Switching runtimes requires all libraries to be rebuilt, including GCC.</p> <p>Notable changes:</p> <ul> <li>C++ overloads for <code>_strdate_s</code> and <code>_strtime_s</code>, <code>_makepath_s</code>, <code>wcsncat_s</code>.</li> <li>gdtoa updated against netlib.org, up to January 2023.</li> <li>genlib tool removed in favor of llvm-dlltool, created by the same author.</li> <li>Make it possible to use winpthreads with MSVC.</li> <li>Updated wine header imports.</li> <li>Many other new win32 APIs.</li> <li>UCRT configurations now primarily use (faster) math functions from UCRT, rather than libmingwex</li> </ul> <p>And many other additions thanks to, but not limited to (in Alphabetical order):</p> <p>Antonin D\u00e9cimo, Bernhard \u00dcbelacker, Biswapriyo Nath, Christian Franke, Dustin Gadal, Jacek Caban, Jameson Nash, J\u00f8ger Hanseg\u00e5rd, Jonathan Schleifer, Kacper Michaj\u0142ow, LIU Hao, Mark Harmstone, Martin Storsj\u00f6, Mateusz Miku\u0142a, Nikolay Sivov, Oleg Tolmatcev, Ozkan Sezer, Pali Roh\u00e1r, Pavel Shishpor, Richard Copley, Steve Lhomme</p>"},{"location":"changelog/#v601-2023-10-30","title":"v6.0.1: 2023-10-30","text":"<ul> <li>Various backports</li> </ul>"},{"location":"changelog/#v505-2023-10-30","title":"v5.0.5: 2023-10-30","text":"<ul> <li>Various backports</li> </ul>"},{"location":"changelog/#v1101-2023-04-29","title":"v11.0.1: 2023-04-29","text":"<ul> <li>Fixes for w32api/Cygwin</li> </ul>"},{"location":"changelog/#v1100-2023-04-28","title":"v11.0.0: 2023-04-28","text":"<p>Notable changes:</p> <ul> <li>New libdloadhelper.a, like libdelayimp.a but using Windows 8 and later APIs.</li> <li>Fix race condition when building lib32 and lib64 in parallel on Windows.</li> <li>*recalloc now only available from msvcr90 and later, UCRT.</li> <li>Redirect access() to __mingw_access() on UCRT wrt to X_OK problems.</li> <li>New Hyper-V APIs.</li> <li>SEH based setjmp on ARM if supported by compiler.</li> <li>--enable-cfguard to enable Control Flow Guard in CRT, requires compiler   support, clang only at this time.</li> <li>Implement some of the stack protector functions/variables so -lssp is   now optional when _FORTIFY_SOURCE or -fstack-protector-strong is used.</li> <li>_FORTIFY_SOURCE=3 support added if __builtin_dynamic_object_size is supported   by the compiler (gcc 12 or later).</li> <li>genstubdll removed.</li> <li>uchar_c16rtomb, uchar_c32rtomb, uchar_mbrtoc16 and uchar_mbrtoc32 removed for   MSVCR*, UCRT only for now.</li> <li>Updates to DX12 headers and much more from Wine.</li> <li>Many other new win32 APIs.</li> </ul> <p>And many other additions thanks to, but not limited to (in Alphabetical order)</p> <p>Alvin Wong, Biswapriyo Nath, Christian Franke, Christoph Reiter, Costas Argyris, delthas, Dmitry Karasik, Jacek Caban, Jeremy Drake, L. E. Segovia, LIU Hao, Luca Bacci, Mark Harmstone, Markus M\u00fctzel, Martin Storsj\u00f6, Mateusz Wajch\u0119prze\u0142\u00f3\u017c, Matthew Lugg, Mike Gelfand, Oleg Oshmyan, Oleg Tolmatcev, Ozkan Sezer, Pali Roh\u00e1r, Raf Lopez, Sergei Trofimovich, Steve Lhomme, TheShermanTanker, Yannis Juglaret, Yonggang Luo, \u674e\u901a\u6d32,</p>"},{"location":"changelog/#v1000-2022-04-04","title":"v10.0.0: 2022-04-04","text":"<p>Notable changes:</p> <ul> <li>New msvcrt10, 20, 40, 70 and 71 import libraries.</li> <li>Drop x86_64 64bit crtdll.dll</li> <li>Updated wine imports</li> <li>Fix intrin.h compatibility with GCC-11</li> <li><code>_(v)scprintf</code> optimization</li> <li>optimize <code>__ms_vsnprintf</code> for LTO</li> </ul> <p>And many other additions thanks to, but not limited to (in Alphabetical order)</p> <p>Biswapriyo Nath, Corinna Vinschen, davjam, Jacek Caban, Jeremy Drake, Jonathan Marler, Liu Hao, Mark Harmstone, Martin Storsj\u00f6, Matheus Izvekov, Michel Zou, Ozkan Sezer, Pali Roh\u00e1r, Patrick Northon, Ruslan Garipov, Steve Lhomme, Tom Ritter</p>"},{"location":"changelog/#v900-2021-05-22","title":"v9.0.0: 2021-05-22","text":"<p>Notable changes:</p> <ul> <li>UCRT updates by Biswapriyo Nath</li> <li>Wine updates by Jacek Caban</li> <li>Various new and updated API headers by Biswapriyo Nath and Liu Hao</li> <li>Various UCRT and MSVCRT fixes by Martin Storsj\u00f6</li> <li><code>at_quick_exit</code> implementation by Martin Storsj\u00f6</li> <li>dism API by Biswapriyo Nath</li> <li>idl fixes by Steve Lhomme</li> <li>Winpthreads fixes by Liu Hao</li> <li>gettimeofday precision increase by Christian Franke</li> </ul> <p>And many other additions thanks to, but not limited to (in Alphabetical order)</p> <p>Alex Henrie, Andrew Eikum, Biswapriyo Nath, Christian Franke, Christoph Reiter, DAVID MAY, Jacek Caban, Jeremy Drake, Jonathan Yong, Liu Hao, Mark Harmstone, Martin Storsj\u00f6, Mateusz Miku\u0142a, Nikolay Sivov, Ozkan Sezer, Pierre Lamot, Rafa\u0142 Harabie\u0144, Scr3amer, Steve Lhomme</p>"},{"location":"changelog/#v802-2021-05-09","title":"v8.0.2: 2021-05-09","text":"<ul> <li>Various backports</li> </ul>"},{"location":"changelog/#v801-2021-05-09","title":"v8.0.1: 2021-05-09","text":"<ul> <li>Various backports</li> </ul>"},{"location":"changelog/#v800-2020-09-18","title":"v8.0.0: 2020-09-18","text":"<p>Notable changes:</p> <ul> <li>New Hyper-V headers and libraries by Biswapriyo Nath</li> <li>Many headers updated from Wine by Jacek Caban.</li> <li>ARM math improvements by Martin Storsj\u00f6</li> <li>floating point fixes by Liu Hao</li> <li>many <code>*printf</code> compatibility fixes by Liu Hao and Martin Storsj\u00f6</li> <li>massive Windows App Store API updates by Steve Lhomme</li> <li>winstorecompat library updates by Martin Storsj\u00f6</li> <li><code>USE_MINGW_ANSI_STDIO</code> now automatically enabled in C99 and C11mode when not using UCRT by Pali Roh\u00e1r</li> <li>wdm and ddk updates by Zebediah Figura</li> <li>UCRT for Windows Store Apps (-lucrtapp) by Martin Storsj\u00f6</li> <li>Audioclient and ActivateAudioInterfaceAsync API updates by Liu Hao</li> <li>DirectX SDKs are now always installed</li> </ul> <p>And many other additions thanks to, but not limited to (in Alphabetical order)</p> <p>Alex Henrie, Biswapriyo Nath, Eric Hassold, Jacek Caban, Jehan Pag\u00e8s, Kleis Auke Wolthuizen, Liu Hao, Martin Mit\u00e1\u0161, Martin Storsj\u00f6, Nikolay Sivov, Noah Treuhaft, Pali Roh\u00e1r, Ruslan Garipov, Sanketh Menda, sezero, Stephan Ruloff, Stephen Kitt, Steve Lhomme, Tom Ritter, xtne6f, Zebediah Figura, \u5c48\u4f73\u4f1f</p>"},{"location":"changelog/#v700-2019-11-10","title":"v7.0.0: 2019-11-10","text":"<p>Notable changes:</p> <ul> <li><code>_FORTIFY_SOURCE</code> support thanks to Christian Franke.</li> <li>Lots of math fixes from Martin Storsj\u00f6.</li> <li>Many headers updated from Wine by Jacek Caban.</li> <li>UCRT support by Martin Storsj\u00f6.</li> </ul> <p>And many other additions thanks to, but not limited to (in Alphabetical order)</p> <p>Alexey Pavlov, Antoine C\u0153ur, Biswapriyo Nath, Chris Charabaruk, Christian Franke, Hugo Beauz\u00e9e-Luyssen, Jacek Caban, James Ross-Gowan, Johannes Pfau, Kai Tietz, Liu Hao, Marisa-Chan, Martin Storsj\u00f6, Marvin Scholz, Mateusz Brzostek, Matthew Palermo, Nikolay Sivov, Pierre Lamot, Richard Pospesel, Ruslan Garipov, sezero, SquallATF, Steve Lhomme, Tom\u00e1\u0161 Golembiovsk\u00fd, Tom Ritter, xnor, Zach Bacon, Zebediah Figura, \u0420\u0443\u0441\u043b\u0430\u043d \u0418\u0436\u0431\u0443\u043b\u0430\u0442\u043e\u0432</p>"},{"location":"changelog/#v600-2018-09-17","title":"v6.0.0: 2018-09-17","text":"<p>Notable changes:</p> <ul> <li>C++ <code>__cxa_atexit</code> thanks to Martin Storsj\u00f6 and Liu Hao</li> <li>Massive additions to support UCRT thanks to Martin Storsj\u00f6</li> <li>Sync COM interface headers with Wine development thanks to Jacek Caban</li> <li>WinRT additions thanks to Hugo Beauz\u00e9e-Luyssen</li> <li>ARM32 and ARM64 additions thanks to Martin Storsj\u00f6</li> <li>CRT library api-ms-win-core additions thanks to Martin Storsj\u00f6</li> <li>CRT library def file reorganization thanks to Martin Storsj\u00f6</li> </ul> <p>And many other additions thanks to, but not limited to (in Alphabetical order)</p> <p>Alexey Pavlov Alon Bar-Lev Andr\u00e9 Hentschel Arthur Edelstein Corinna Vinschen David Grayson David Wohlferd Ebrahim Byagowi Guy Helmer Hugo Beauz\u00e9e-Luyssen Ihsan Akmal Jacek Caban James Ross-Gowan Jean-Baptiste Kempf Jonathan Yong Jon Turney Kai Tietz Liu Hao Martell Malone Martin Storsj\u00f6 Mateusz Matheus Izvekov mati865 Micha\u0142 Janiszewski Nikolay Sivov niXman Petri Hodju Ray Donnelly Ruben Van Boxem Ruslan Garipov Samuel D. Leslie sezero Soar Qin Tamar Christina Tamir Duberstein Tim Hutt Tom Ritter Yuta Nakai \u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u041f\u0430\u0432\u043b\u043e\u0432 \u0420\u0443\u0441\u043b\u0430\u043d \u0418\u0436\u0431\u0443\u043b\u0430\u0442\u043e\u0432 \u5b8b\u51ac\u751f</p>"},{"location":"changelog/#v504-2018-06-04","title":"v5.0.4: 2018-06-04","text":"<ul> <li>Fix gcc-8.1.0 compatibility regarding _xgetbv</li> <li><code>%e</code> printf specifier will now produce at least 2 digits for the   exponent.</li> </ul>"},{"location":"changelog/#v503-2017-11-04","title":"v5.0.3: 2017-11-04","text":"<ul> <li>pseudo-reloc will now try to restore page protection settings prior   to manipulating it, rather than simply assuming it was read-only   with execute.</li> <li>winpthreads: Fix undefined <code>__divmoddi4</code> when compiling with newly   bootstrapped gcc-7</li> <li>Fixed modf family segfault due to eax clobbering.</li> </ul>"},{"location":"changelog/#v502-2017-03-28","title":"v5.0.2: 2017-03-28","text":"<ul> <li>RegSetKeyValueW now has proper wide arguments.</li> <li>Fix some crashes in winpthreads due to misaligned memory access when   used with some SSE instructions.</li> <li>Fix pdh.h function calls to have proper stdcall decorators.</li> </ul>"},{"location":"changelog/#v501-2017-01-06","title":"v5.0.1: 2017-01-06","text":"<ul> <li>Don't use feature <code>(__attribute__((gcc_struct)))</code> that isn't supported on   clang when compiling on clang thanks to David Wohlferd.</li> <li>Various ARM math fixes thanks to Martin Storsj\u00f6</li> <li>Removed some duplicate uuids definitions, thanks to HugoBeauz\u00e9e-Luyssen.</li> <li>Define <code>IN6_IS_ADDR_</code> macros to conform to Posix Specm thanks toJean-Baptiste   Kempf</li> <li>dxva.h: Add support for VP8/9 in DxVA2 thanks to Yuta Nakai</li> </ul>"},{"location":"changelog/#v500-2016-10-19","title":"v5.0.0: 2016-10-19","text":"<ul> <li>Fixes to the <code>__mingw_printf</code> family of functions.</li> <li>DirectX updates from Wine.</li> <li>Various updates to support Windows 7 and 10.</li> <li>Various header typo fixes.</li> </ul>"},{"location":"changelog/#v4","title":"v4","text":"<ul> <li>32bit ARM thumb software math (Thanks to Andr\u00e9 Hentschel!).</li> <li>New ftw() support for gcc-5.x support.</li> <li>Experimental printf changes - Ability to print 128bit integers   (%I128*) and Decimal Floats (%H, %D), disabled by default. Build   the CRT with <code>--enable-experimental</code> to use.</li> <li>Updated OpenGL 4.5 headers.</li> <li>Better DirectX 11 support.</li> <li>Better Windows 7, 8/8.1 API support.</li> </ul>"},{"location":"changelog/#v3","title":"v3","text":"<ul> <li>Required for GCC 4.8.</li> <li>Much improved floating point math performance.</li> <li>Improved MSVC intrinsics performance.</li> <li>Addition of wide variants in C99 printf and scanf.</li> <li>Partial C1X secure CRT support.</li> <li>Partial MS Secure CRT templates for C++.</li> <li>Vastly improved Windows 7 and 8 win32 API support.</li> <li>POSIX-style Large File Support.</li> <li>Winpthread: new library, pthreads implementation for Windows.</li> <li>Winstorecompat: new library for Windows Store compatibility (WIP).</li> </ul>"},{"location":"changelog/#v2","title":"v2","text":"<ul> <li>Expanded Windows Vista/7 API support.</li> </ul>"},{"location":"contribute/","title":"Contribute","text":"<p>Mingw-w64 and the ecosystem surrounding it are stable and with many features. There are however some topics for which developer-time has been scarce. This page lists tasks that are relatively simple and can be worked on without the need for a huge background while still being important and high on the wish-lists of users.</p> <p>In order to avoid duplicate efforts, if you take on one of these tasks, please mention it on the mailing-list.</p> <p>The tasks below have been split enough to be simple and fairly well-contained while still being useful on their own. Most could be internship topics.</p> <p>There are references to other websites on this page; their presence does not constitute an endorsement in any way.</p>"},{"location":"contribute/#win32-api-and-runtime","title":"Win32 API and Runtime","text":"<p>Mingw-w64 is constantly looking for updates to its win32 API headers from MSDN Library. If you believe you have found an API that is not available in Mingw-w64 but is documented as part of MSDN or a mistake in Mingw-w64, please do not hesitate to contact us through the mailing-list.</p> <p>For patch submissions, please remember to use sign-off your git commits before submitting the patches to the mailing-list. Both git send-email and git format-patch forms are allowed. From past experiences however, if you do use an email client to attach individual patches, please use the .txt extension, especially for Google Mail users so the patch does not get treated as a binary.</p>"},{"location":"contribute/#seh-for-32bits","title":"SEH for 32bits","text":"<p>The patent for SEH for 32bits has now expired and while new computers are all 64 bits, Intel has continued selling Atom CPUs that only handled 32 bits very late and some applications are still 32 bits. Projects such as Wine and ReactOS will also benefit from 32bits SEH. Overall the need is still there and will continue for years to come and will outlast Microsoft's support for 32bits.</p> <p>Note that you will need FSF paperwork since the work has to be done inside GCC. Check CC's page on contributing.</p> <ul> <li>The now-expired patent on SEH</li> <li>A Crash Course on the Depths of Win32\u2122 Structured Exception Handling</li> <li>Win32 Exceptions \u2013 OS Level Point of View</li> <li>How a C++ compiler implements exception handling</li> <li>Structured Exception Handling Basics</li> <li>Windows' SEH and C++ Exception Handling</li> <li>Structured Exception Handling Considered Harmful</li> <li>SEH and C++ Exceptions - catch all in one</li> <li>GCC sources and   unwind-seh.c   in particular. Note that 32-bit SEH is stack-based and requires   code-generation unlike 64bits SEH which is simply table-based (that difference   explains why the patent only mattered to 32bits).</li> </ul>"},{"location":"contribute/#sanitizers-asan-tsan-usan","title":"Sanitizers (ASAN, TSAN, USAN)","text":"<p>Sanitizers are runtime checks for a number of situations which have usually required instrumentation with tools that cause an important slowdown (like Valgrind).</p> <p>They are relatively new and much lighter than other approaches.</p>"},{"location":"contribute/#thorough-status-report-for-sanitizers-asan-tsan-usan","title":"Thorough Status Report for Sanitizers (asan, tsan, usan)","text":"<p>ASAN, TSAN and USAN are great technologies which are available in GCC. Unfortunately they are not completely usable on Windows. A proper review and tests are needed before anything.</p>"},{"location":"contribute/#fixing-remaining-bits-in-asan-tsan-or-usan-see-above","title":"Fixing remaining bits in asan, tsan or usan (see above)","text":"<p>Once a report on the status is available, work on it can be started.</p>"},{"location":"contribute/#link-time-optimization-lto","title":"Link-Time Optimization (LTO)","text":"<p>Optimizations in C cannot cross compilation units and many of them are therefore missed in large applications and when using libraries. LTO runs some optimizations during linking, when the toolchain can see all the objects at once and run cross-unit optimizations.</p>"},{"location":"contribute/#thorough-status-report-for-lto","title":"Thorough Status Report for LTO","text":"<p>LTO has recently been improved a lot in GCC and binutils. There are still some issues on Windows though. The first step to making it work is to get a proper and up-to-date test and to identify the platform-specific bugs.</p>"},{"location":"contribute/#fixing-remaining-bits-in-lto","title":"Fixing remaining bits in LTO","text":"<p>Fix the issues found by the status report from above. The actual bug list will be updated as it becomes available.</p>"},{"location":"contribute/#compiler-plugin-for-visual-studio","title":"Compiler plugin for Visual Studio","text":"<p>A compiler plugin would make GCC, binutils tools and GDB available from the Visual Studio IDE. Most people state they stick with VS because of the IDE; such a plugin would allow mixing the two.</p> <p>VisualGDB (commercial) provides such a plugin, apparently meant for compiling to micro-controllers and Linux (Android or not).</p>"},{"location":"contribute/#debug-infos","title":"Debug Infos","text":"<p>PDB is the file-format used by Microsoft to store debug info. Unfortunately it is undocumented.</p>"},{"location":"contribute/#documentation-of-the-pdb-file-format","title":"Documentation of the PDB file-format","text":"<p>Since the format is undocumented, first step is to document it. Fortunately, during the past few years, reader and possibly writer code has appeared, mostly out of Microsoft.</p> <ul> <li> <p>A library named ''dump_syms'' is   available. It can read PDB files at least to some extent. Licensing and origin   need to be checked.</p> </li> <li> <p>Microsoft has released Roslyn, a \".NET Compiler   Platform\". It contains a PDB writer   implementation.   This may be an actual implementation or only an interface to the actual one.   It is difficult to say without further analysis.</p> </li> <li> <p>Microsoft has also released CCI Metadata   under the MS-PL. It contains PDB   reader   implementation   that should constitute an appropriate source.</p> </li> </ul>"},{"location":"contribute/#creation-of-pdb-files","title":"Creation of PDB files","text":"<p>Creating PDB files will allow the Microsoft tools to make meaningful backtraces when code built with free compilers is involved.</p>"},{"location":"contribute/#handling-of-pdb-in-gdb","title":"Handling of PDB in GDB","text":"<p>Reading PDB files will allow free tools to make meaningful backtraces when code built with MSVC is involved.</p>"},{"location":"contribute/#translation-fromto-pdb","title":"Translation from/to PDB","text":"<p>Most often debug information will only be available in a single format. Being able to convert between them when needed will be useful.</p>"},{"location":"contribute/#c11-and-c11-threading-support","title":"C11 and C++11 Threading Support","text":""},{"location":"contribute/#c11-threading-and-atomics","title":"C11 Threading and Atomics","text":"<p>The C11 standard has a section on threading which is still left unimplemented on several platforms. The API follows pthreads' quite closely and it is left to the implementer to decide whether to base it on winpthreads or directly on the (&gt;= Vista) Win32 API.</p> <p>The final C11 draft is identical to the standard but is available freely.</p> <p>Note that you will need FSF paperwork since the work has to be done inside GCC. Check GCC's page on contributing.</p>"},{"location":"contribute/#implementation-of-c11-and-c11-threading-support-without-winpthreads","title":"Implementation of C11 and C++11 Threading Support Without Winpthreads","text":""},{"location":"contribute/#mcfgthread","title":"mcfgthread","text":"<p>The mcfgthread library aims at providing an efficient implementation of thread support for GCC that is required by the C11 and C++11 standard. It uses a lot of undocumented Windows NT syscalls to ensure performance. Its introduction and manual can be found from its wiki pages.</p>"},{"location":"donate/","title":"Donate","text":"<p>Mingw-w64 is almost entirely made by volunteer. Only two employees are paid to contribute to mingw-w64 and even then it's not full-time: we estimate the paid time spent on the project matches 0.5-employee. All other contributions are done on free time.</p> <p>There are many evolutions and features planned but resources are scarce. In particular, if mingw-w64 saves you from the steep cost of proprietary toolchains, think about contributing a bit; you will also most likely quickly benefit from the improvements.</p>"},{"location":"donate/#non-financial-contributions","title":"Non-financial contributions","text":"<p>More than through money, the best way to help the project is to invest man-time in it. The list of tasks on the page about contributing is the best place to start and if you are an employer with trainees, several of these tasks will make good internship.</p>"},{"location":"donate/#donations","title":"Donations","text":"<p>With the current organization and funds of mingw-w64, it wouldn't make sense to try to pay a developer to spend time on specific topics. Instead, the money will be spent on hardware (testing servers, Windows licenses, phone, tablets, ...) and meeting expenses (setting up hackatons and paying for travel expenses as some major mingw-w64 developers live very far from others).</p> <p>Currently, only Paypal is available:</p> <p>Paypal (to Ka\u00ef Tietz)</p> <p>Below is a list of donors, starting from January 2015. We'd like to list all our donors but we value your wishes; please state whether you'd like to have your name, pseudonym or company on the website.</p> <ul> <li>James Beard</li> <li>WSoptics GmbH</li> </ul>"},{"location":"donate/#hardware-donations","title":"Hardware donations","text":"<p>There is no facility at the moment to receive hardware. These donations will have to be handled on a case-by-case basis (mostly to decide where to ship).</p>"},{"location":"downloads/","title":"Downloads","text":"<p>The heart of the Mingw-w64 project is headers and support libraries to run the output of GCC on Windows. Since Mingw-w64 is neither the home of GCC nor of binutils, several sets of installation packages which combine them are available.</p> <p>In addition, the sources are available but most people will want to grab binaries directly.</p>"},{"location":"downloads/#pre-built-toolchains-and-packages","title":"Pre-built toolchains and packages","text":"Version  Host  GCC / Mingw-w64 Version  Languages  Additional Software in Package Manager   Arch                         Linux Arch Linux  13.1.0/11.0.0 Ada, C, C++, Fortran, Obj-C, Obj-C++  many Cygwin Rolling Windows 11.3.0/10.0.0  C, C++, Fortran, Obj-C   many Debian Debian 10 (Buster)  8.3.0/6.0.0  Ada, C, C++, Fortran, Obj-C, Obj-C++  9 (gdb, libassuan, libgcrypt, libgpg-error, libksba, libnpth, nsis, win-iconv, zlib)  Debian 11 (Bullseye)  10.2.1/8.0.0  Debian 12 (Bookworm)  12.0.0/10.0.0   Fedora Fedora 36  11.2.1/9.0.0  Ada, C, C++, Fortran, Obj-C, Obj-C++   many Fedora 37  12.2.1/10.0.0  LLVM-MinGW 20240518 Windows, Linux, macOS LLVM 18.1.6/trunk C, C++ make, Python                          MacPorts Rolling  macOS 13.2.0/11.0.1 C, C++, Fortran, Obj-C, Obj-C++  1 (nsis) MinGW-W64-builds Rolling  Windows 13.1.0/11.0.0  C, C++, Fortran  4 (gdb, libiconf, python, zlib)  MSYS2 Rolling  Windows 14.1.0/trunk Ada, C, C++, Fortran, Obj-C, Obj-C++, OCaml  many  Ubuntu  20.04 Focal Fossa  9.3.0/7.0.0  Ada, C, C++, Fortran, Obj-C, Obj-C++  9 (gdb, libassuan, libgcrypt, libgpg-error, libksba, libnpth, nsis, win-iconv, zlib)   22.04 Jammy Jellyfish  10.3.0/8.0.0   22.10 Kinetic Kudu  10.3.0/10.0.0   23.04 Lunar Lobster  12.2.0/10.0.0  w64devkit 2.0.0 Windows 14.2.0/12.0.0 C, C++, Fortran                  8                 (busybox,                 cppcheck,                 ctags,                 gdb,                 make,                 nasm,                 pkg-config,                 vim)              WinLibs.com Rolling  Windows 13.2.0 Ada, C, C++, Fortran, Obj-C, Obj-C++, Assembler Package manager: work in progress (will offer &gt; 2500 packages)"},{"location":"downloads/#arch-linux","title":"Arch Linux","text":"<p>Installation:</p> <ul> <li>Extra repository (toolchain)</li> <li>AUR repository (additional packages)</li> </ul>"},{"location":"downloads/#cygwin","title":"Cygwin","text":"<p>Cygwin is a Unix-like environment and command-line interface for Microsoft Windows. Its core is the cygwin1.dll library which provides POSIX functionality on top of the Win32 API. It can be used as a build environment which targets Windows directly and for which output doesn't depend on cygwin1.dll.</p> <p>Installation is done through cygwin's package manager: setup.exe.</p> <p>As part of the numerous packages in cygwin, there are cross-compilation toolchains which target both 32 bits and 64 bits; their names start with \u201cmingw64-\u201d.</p> <p>Once they are installed, they should be used according to the general cross-compilation approach.</p>"},{"location":"downloads/#debian","title":"Debian","text":"<p>Installation: through integrated package manager.</p> <p>Mingw-w64 packages on Debian</p>"},{"location":"downloads/#fedora","title":"Fedora","text":"<p>Installation: through integrated package manager.</p>"},{"location":"downloads/#llvm-mingw","title":"LLVM-MinGW","text":"<p>LLVM-MinGW is a toolchain built with Clang, LLD, libc++, targeting i686, x86_64, arm and aarch64 (ARM64), with releases both for running as a cross compiler from Linux and for running on Windows. It supports Address Sanitizer, Undefined Behaviour Sanitizer, and generating debug info in PDB format.</p> <p>Installation: GitHub</p>"},{"location":"downloads/#macports","title":"MacPorts","text":"<p>To install just the 32-bit or just 64-bit compiler with dependencies, use:</p> <pre><code>sudo port install i686-w64-mingw32-gcc\nsudo port install x86_64-w64-mingw32-gcc\n</code></pre> <p>A shortcut to install both:</p> <pre><code>sudo port install mingw-w64\n</code></pre> <p>Here is the list of Mingw-w64 packages on MacPorts.</p>"},{"location":"downloads/#mingw-w64-builds","title":"MinGW-W64-builds","text":"<p>Installation: GitHub</p>"},{"location":"downloads/#msys2","title":"MSYS2","text":"<p>Installation: GitHub</p>"},{"location":"downloads/#ubuntu","title":"Ubuntu","text":"<p>Installation: through integrated package manager.</p> <p>Mingw-w64 packages on Ubuntu</p>"},{"location":"downloads/#w64devkit","title":"w64devkit","text":"<p>w64devkit is a portable C and C++ development kit for x64 (and x86) Windows.</p> <p>Included tools:</p> <ul> <li>Mingw-w64 GCC : compilers, linker, assembler</li> <li>GDB : debugger</li> <li>GNU Make : standard build tool</li> <li>busybox-w32 : standard unix utilities, including sh</li> <li>Vim : powerful text editor</li> <li>Universal Ctags : source navigation</li> <li>NASM : x86 assembler</li> <li>Cppcheck : static code analysis</li> </ul> <p>The toolchain includes pthreads, C++11 threads, and OpenMP. All included runtime components are static.</p> <p>Installation: GitHub</p>"},{"location":"downloads/#winlibscom","title":"WinLibs.com","text":"<p>Standalone MinGW-w64+GCC builds for Windows, built from scratch (including all dependencies) natively on Windows for Windows.</p> <p>Downloads are archive files (<code>.zip</code> or <code>.7z</code>). No installation is required, just extract the archive and start using the programs in <code>mingw32\\bin</code> or  <code>mingw64\\bin</code>. This allows for a relocatable compiler suite and allows having multiple versions on the same system.</p> <p>Also contains other tools including:</p> <ul> <li>GDB - the GNU Project debugger</li> <li>GNU Binutils - a collection of binary tools</li> <li>GNU Make - a tool which controls the generation of executables and other non-source files</li> <li>Yasm - The Yasm Modular Assembler Project</li> <li>NASM - The Netwide Assembler</li> <li>JWasm - A free MASM-compatible assembler</li> </ul> <p>Flavors:</p> <ul> <li>separate packages for 32-bit (i686) and 64-bit (x86_64) Windows</li> <li>separate packages for MSVCRT and UCRT builds</li> <li>only POSIX threads builds (which also include Win32 API thread functions)</li> <li>exception model: Dwarf for 32-bit (i686) and SEH for 64-bit (x86_64)</li> </ul> <p>Installation: Download from winlibs.com and extract archive (no installation needed).</p>"},{"location":"downloads/#sources","title":"Sources","text":"<p>Tarballs for the mingw-w64 sources are hosted on SourceForge.</p> <p>The latest version from the 11.x series is 11.0.0.</p> <p>The latest version from the 10.x series is 10.0.0.</p> <p>The latest version from the 9.x series is 9.0.0.</p> <p>The latest version from the 8.x series is 8.0.2.</p> <p>The latest version from the 7.x series is 7.0.0.</p> <p>The latest version from the 6.x series is 6.0.0.</p> <p>The latest version from the 5.x series is 5.0.4.</p> <p>The old wiki has instructions for building native and cross toolchains.</p> <p>Details on how to get the mingw-w64 code from Git and an Git-web viewer are available on SourceForge.</p>"},{"location":"downloads/#unsorted-complementary-list","title":"Unsorted complementary list","text":""},{"location":"downloads/#darwinmac-os-x","title":"Darwin/Mac OS X","text":"<p>The existing Darwin binaries have been built through buildbot in 2013 and links to them can be found on the dedicated page.</p>"},{"location":"downloads/#gcc-with-the-mcf-thread-model","title":"GCC with the MCF thread model","text":"<p>GCC with the MCF thread model is a series of x86 and x64 native toolchains built by LH_Mouse. The MCF thread model has been merged into GCC 13, and can be enabled by passing <code>--enable-threads=mcf</code> to GCC's configure script. C++11 threading facilities, such as <code>std::thread</code>, <code>std::mutex</code>, <code>std::condition_variable</code>, <code>std::call_once</code>, <code>thread_local</code> etc. invoke the mcfgthread library, which implements them on Windows syscalls in a more standard-compliant and more efficient way, outperforming even native slim reader/write locks (SRW) since Windows Vista.</p>"},{"location":"downloads/#opensuse","title":"OpenSUSE","text":"<p>The OpenSUSE Linux distribution also has a large and well-maintained set of packages for cross-compilation.</p>"},{"location":"downloads/#rubenvb","title":"Rubenvb","text":"<p>Rubenvb has built a number of toolchains including some for less common setups. They are split into two categories: toolchains targeting Win32 or Win64.</p>"},{"location":"support/","title":"Support","text":"<p>Mingw-w64 has several active support channels.</p> <ul> <li>Mailing-List</li> <li>#mingw-w64 IRC channel on irc.oftc.net</li> <li>Discussion Forum</li> <li>Issue Tracker</li> </ul> <p>Documentation exists in the Sourceforge wiki: https://sourceforge.net/p/mingw-w64/wiki2/Home/</p>"},{"location":"support/#licensing","title":"Licensing","text":"<p>Mingw-w64 is free software and permissively-licensed. The details are located in the sources themselves.</p> <p>The ReactOS and Wine logos used on the website are licensed under the GPLv2.</p>"}]}